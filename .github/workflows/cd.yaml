name: cd

on:
  push:
    branches:
      - main

env: 
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: eks-practicepractice
  SHORT_SHA: $(echo ${{ github.sha }} | cut -c 1-8)


jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Clone
      uses: actions/checkout@v4

        #- name: Test
        #  run: |
        #    cd site
        #    npm install
        #    npm test

  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - run-tests

    steps:
    - name: Clone
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create .env File
      run: |
        echo "HasdIdsSalt=${{secrets.HasdIdsSalt}}" > .env
        echo "openai_org=${{secrets.openai_org}}" >> .env
        echo "openai_secret=${{secrets.openai_secret}}" >> .env
        echo "chatgpt_lambda_url=${{secrets.chatgpt_lambda_url}}" >> .env
        echo "aws_data_user_name=${{secrets.aws_data_user_name}}" >> .env
        echo "aws_data_access_key_id=${{secrets.aws_data_access_key_id}}" >> .env
        echo "aws_data_secret_access_key=${{secrets.aws_data_secret_access_key}}" >> .env
        echo "aws_data_region=${{secrets.aws_data_region}}" >> .env
        echo "aws_db_backup_bucket=${{secrets.aws_db_backup_bucket}}" >> .env
        echo "aws_data_bucket=${{secrets.aws_data_bucket}}" >> .env
        echo "CDN_DOMAIN=${{secrets.CDN_DOMAIN}}" >> .env
        echo "CDN_URL=${{secrets.CDN_URL}}" >> .env
        echo "CND_data_dir=${{secrets.CND_data_dir}}" >> .env
        echo "CND_specifications_dir=${{secrets.CND_specifications_dir}}" >> .env
        echo "CND_content_dir=${{secrets.CND_content_dir}}" >> .env
        echo "Bucket_database_dir=${{secrets.Bucket_database_dir}}" >> .env
        echo "django_allowed_hosts=${{secrets.django_allowed_hosts}}" >> .env
        echo "CSRF_TRUSTED_ORIGINS=${{secrets.CSRF_TRUSTED_ORIGINS}}" >> .env
        echo "django_secret=${{secrets.django_secret}}" >> .env
        echo "django_debug_state=${{secrets.django_debug_state}}" >> .env
        echo "DB_ENGINE=${{secrets.DB_ENGINE}}" >> .env
        echo "DB_NAME=${{secrets.DB_NAME}}" >> .env
        echo "DB_USER=${{secrets.DB_USER}}" >> .env
        echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env
        echo "DB_HOST=${{secrets.DB_HOST}}" >> .env
        echo "DB_PORT=${{secrets.DB_PORT}}" >> .env
        echo "Celery_Broker=${{secrets.Celery_Broker}}" >> .env
        echo "Celery_Result=${{secrets.Celery_Result}}" >> .env
        echo "Celery_Broker=${{secrets.Celery_Broker}}" >> .env
        echo "Celery_Result=${{secrets.Celery_Result}}" >> .env
        echo "PAYPAL_MODE=${{secrets.PAYPAL_MODE}}" >> .env
        echo "Paypal_live_account=${{secrets.Paypal_live_account}}" >> .env
        echo "Paypal_live_client_id=${{secrets.Paypal_live_client_id}}" >> .env
        echo "Paypal_live_client_secret=${{secrets.Paypal_live_client_secret}}" >> .env
        echo "Paypal_live_webhook_id=${{secrets.Paypal_live_webhook_id}}" >> .env
        echo "Paypal_test_account=${{secrets.Paypal_test_account}}" >> .env
        echo "Paypal_test_client_id=${{secrets.Paypal_test_client_id}}" >> .env
        echo "Paypal_test_client_secret=${{secrets.Paypal_test_client_secret}}" >> .env
        echo "Paypal_test_webhook_id=${{secrets.Paypal_test_webhook_id}}" >> .env
        echo "Stripe_live_mode=${{secrets.Stripe_live_mode}}" >> .env
        echo "Stripe_live_publishable=${{secrets.Stripe_live_publishable}}" >> .env
        echo "Stripe_live_secret=${{secrets.Stripe_live_secret}}" >> .env
        echo "Stripe_test_publishable=${{secrets.Stripe_test_publishable}}" >> .env
        echo "Stripe_test_secret=${{secrets.Stripe_test_secret}}" >> .env
        echo "Stripe_webhook_secret=${{secrets.Stripe_webhook_secret}}" >> .env
        echo "Affiliate_coupon_test=${{secrets.Affiliate_coupon_test}}" >> .env
        echo "Affiliate_coupon_live=${{secrets.Affiliate_coupon_live}}" >> .env
        echo "Creator_percentage_split=${{secrets.Creator_percentage_split}}" >> .env
        echo "Affiliate_percentage_split=${{secrets.Affiliate_percentage_split}}" >> .env
        echo "EMAIL_BACKEND=${{secrets.EMAIL_BACKEND}}" >> .env
        echo "SES_endpoint=${{secrets.SES_endpoint}}" >> .env
        echo "SES_TLS_PORT=${{secrets.SES_TLS_PORT}}" >> .env
        echo "SES_USE_TLS=${{secrets.SES_USE_TLS}}" >> .env
        echo "SES_SMTP_USER=${{secrets.SES_SMTP_USER}}" >> .env
        echo "SES_PASSWORD=${{secrets.SES_PASSWORD}}" >> .env
        echo "SES_EMAIL_main=${{secrets.SES_EMAIL_main}}" >> .env
        echo "SES_EMAIL_info=${{secrets.SES_EMAIL_info}}" >> .env
        echo "Site_domain=${{secrets.Site_domain}}" >> .env

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker image build \
        --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
        --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }} \
        .
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}

    - name: Install and configure kubectl
      run: |
        VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        # https://github.com/aws/aws-cli/issues/6920#issuecomment-1117981158
        VERSION=v1.23.6
        curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
          --progress-bar \
          --location \
          --remote-name
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml

    - name: Deploy
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
        export IMAGE_TAG=${{ env.SHORT_SHA }}
        export KUBECONFIG=kubeconfig.yaml
        envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
        kubectl kustomize k8s | kubectl apply -f -
